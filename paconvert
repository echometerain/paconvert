#!/bin/bash

#  _____                                    _   
# |  __ \                                  | |  
# | |__) |_ _  ___ ___  _ ____   _____ _ __| |_ 
# |  ___/ _` |/ __/ _ \| '_ \ \ / / _ \ '__| __|
# | |  | (_| | (_| (_) | | | \ V /  __/ |  | |_ 
# |_|   \__,_|\___\___/|_| |_|\_/ \___|_|   \__|

# Copyright (C) 2020-2021

# This file is part of Paconvert.

# Paconvert is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Paconvert is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Paconvert. If not, see <https://www.gnu.org/licenses/>.

if [[ -z "$2" ]]; then
	echo "Please specify a flag/package"
	exit 1
fi

while [[ -n "$2" ]]; do
	case "$1" in
		-a|--aur)
			if [[ $(wget -S --spider "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$2"  2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
				tfile="$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$2")"
			else
				echo "$2 does not exist in the AUR"
				exit 1
			fi

			if [[ $(wget -S --spider "https://aur.archlinux.org/cgit/aur.git/plain/$2.install?h=$2"  2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
				tfile+="\n$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/$2.install?h=$2")"
			else
				echo ".install file not found in the AUR, continuing without"
			fi
		;;
		-m|--mpr)
			if [[ $(wget -S --spider "https://mpr.hunterwittenborn.com/cgit/aur.git/plain/PKGBUILD?h=$2"  2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
				tfile="$(curl -s "https://mpr.hunterwittenborn.com/cgit/aur.git/plain/PKGBUILD?h=$2")"
			else
				echo "$2 does not exist in the MPR"
				exit 1
			fi

			if [[ $(wget -S --spider "https://mpr.hunterwittenborn.com/cgit/aur.git/plain/$2.install?h=$2"  2>&1 | grep 'HTTP/1.1 200 OK') ]]; then
				tfile+="\n$(curl -s "https://mpr.hunterwittenborn.com/cgit/aur.git/plain/$2.install?h=$2")"
			else
				echo ".install file not found in the MPR, continuing without"
			fi
		;;
		-l|--local)
			if [[ -f "$2.PKGBUILD" ]]; then
				tfile=$(cat $2.PKGBUILD)
			else
				echo "$2.PKGBUILD does not exist"
				exit 1
			fi

			if [[ -f "$2.install" ]]; then
				tfile+="\n$(cat $2.install)"
			else
				echo "$2.install file not found in the current directory, continuing without"
			fi
		;;
		-h|--help)
			echo "
			options:
			-a --aur, Grab PKGBUILD from the AUR
			-m --mpr, Grab PKGBUILD from the MPR
			-l --local, Convert local PKGBUILD
			-h --help, Display this message
			"
		;;
		*)
			paconvert -h
			exit 3
		;;

	esac

	printf "paconvert will only substitute the names of variables and functions, not the dependencies which needs to be replaced with its corresponding Ubuntu packages.\n"
	printf "All architectures other than x86_64/amd64 are unsupported in pacstall.\n"
	printf "Variables such as pkgbase, pkgrel, epoch, arch, license, groups, checkdepends, backup, changelog, url, noextract, validpgpkeys, source_i686, md5sums, sha1sums sha224sums, sha384sums, sha512sums and b2sums are not currently implemented in Pacstall, they should be removed.\n"
	printf "An equivalent to check() is not currently implemented in Pacstall. Its contents should be removed.\n"
	printf "Equivalents to .install file functions such as pre_install(), pre_upgrade(), post_upgrade(), and pre_remove() are not currently implemented in pacstall. Its contents should be removed.\n"
	printf "Lists such as source and sha256sum are implemented as single strings (url, patch, hash) in pacstall. Please change them to single strings.\n"

	tfile=${tfile//'pkgname='/'name='} # names substitution
	tfile=${tfile//'${pkgname}'/'$name'}
	tfile=${tfile//'pkgver='/'version='}
	tfile=${tfile//'${pkgver}'/'$version'}
	tfile=${tfile//'pkgdesc='/'description='}
	tfile=${tfile//'url='/'link='}
	tfile=${tfile//'source='/'url='}
	tfile=${tfile//'source_x86_64='/'url='}
	tfile=${tfile//'makedepends='/'build_depends='}
	tfile=${tfile//'provides='/'gives='}
	tfile=${tfile//'sha256sums='/'hash='}
	tfile=${tfile//'package() {'/'install() {'}
	tfile=${tfile//'$pkgdir'/'$STOWDIR/$name'}
	tfile=${tfile//'# Maintainer: '/'maintainer="'}
	tfile=${tfile//'post_install() {'/'postinst() {'}
	printf "$tfile" | grep -q 'post_remove() {'
	if [[ $? -eq 0 ]]; then
		rmscript=true
		tfile=${tfile//'post_remove() {'/'removescript() {'}
	fi

	printf "$tfile" | grep -q 'prepare() {'
	if [[ $? -eq 0 ]]; then
		line=$(printf "$tfile" | grep -n 'prepare()')
	else
		printf "$tfile" | grep -q 'build()'
		if [[ $? -eq 0 ]]; then
			line=$(printf "$tfile" | grep -n 'build()')
		else
			line=$(printf "$tfile" | grep -n 'install()')
		fi
	fi
	linenum=$(($(echo $line | cut -d: -f1)-1))
	variables=$(printf "$tfile" | head -$linenum)

	revlinenum=$(($(printf "$tfile" | wc -l)-$linenum+1))
	funcs=$(printf "$tfile" | tail -$revlinenum)

	variables=${variables//"' '"/" "}
	variables=${variables//"\" \""/" "}
	variables=${variables//"(\""/"\""}
	variables=${variables//"('"/"\""}
	variables=${variables//"\")"/"\""}
	variables=${variables//"')"/"\""}
	variables=${variables//">"/">\""}
	if [[ -n $rmscript ]]; then
		variable+="\nremovescript=\"yes\""
	fi
	if [[ -w $(pwd) ]]; then
		printf "$variables\n$funcs" | tee "$2.pacscript" > "/dev/null"
	else
		printf "$variables\n$funcs" | sudo tee "$2.pacscript" > "/dev/null"
	fi
	shift
done
exit 0
